version: '3.5'

services:

  gateway:
    ports:
      - 8080:8080
    image: functions/gateway:0.7.9
    networks:
      - functions
    environment:
      functions_provider_url: 'http://faas-swarm:8080/'
      read_timeout:  '25s'
      write_timeout: '25s'
      upstream_timeout: '20s'
      dnsrr: 'true'
      faas_nats_address: 'nats'
      faas_nats_port: 4222
      direct_functions: 'true'
      direct_functions_suffix: ''
    deploy:
      resources:
        reservations:
          memory: 100M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s
      placement:
        constraints:
          - 'node.platform.os == linux'

  faas-swarm:
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    image:  functions/faas-swarm:0.2.3
    networks:
      - functions
    environment:
      read_timeout:  '25s'
      write_timeout: '25s'
      DOCKER_API_VERSION: '1.30'
    deploy:
      placement:
        constraints:
          - 'node.role == manager'
          - 'node.platform.os == linux'
      resources:
        reservations:
          memory: 100M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s

  nats:
    image: nats-streaming:0.6.0
    command: '--store memory --cluster_id faas-cluster'
    networks:
      - functions
    deploy:
      resources:
        limits:
          memory: 125M
        reservations:
          memory: 50M
      placement:
        constraints:
          - 'node.platform.os == linux'

  queue-worker:
    image: functions/queue-worker:0.4.3
    networks:
      - functions
    environment:
      max_inflight: '1'
      ack_timeout: '30s'
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 20M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s
      placement:
        constraints:
          - 'node.platform.os == linux'

  prometheus:
    image: prom/prometheus:v2.2.0
    environment:
      no_proxy: "gateway"
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_rules
        target: /etc/prometheus/alert.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    #   - '-storage.local.path=/prometheus'
    ports:
      - 9090:9090
    networks:
      - functions
    deploy:
      placement:
        constraints:
          - 'node.role == manager'
          - 'node.platform.os == linux'
      resources:
        limits:
          memory: 500M
        reservations:
          memory: 200M

  alertmanager:
    image: prom/alertmanager:v0.15.0-rc.0
    environment:
      no_proxy: "gateway"
    command:
      - '--config.file=/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
        - functions
    # Uncomment the following port mapping if you wish to expose the Prometheus
    # Alertmanager UI.
    # ports:
    #     - 9093:9093
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 20M
      placement:
        constraints:
          - 'node.role == manager'
          - 'node.platform.os == linux'
    configs:
      - source: alertmanager_config
        target: /alertmanager.yml

  ping:
    image: python-ping:latest
    labels:
      function: 'true'
      com.openfaas.scale.min: 5
    networks:
      - functions
    environment:
      no_proxy: 'gateway'
      https_proxy: $https_proxy
    deploy:
      placement:
        constraints:
          - 'node.platform.os == linux'


  eval:
    image: python-eval:latest
    labels:
      function: 'true'
    networks:
      - functions
    environment:
      no_proxy: 'gateway'
      https_proxy: $https_proxy
    deploy:
      placement:
        constraints:
          - 'node.platform.os == linux'

configs:
  prometheus_config:
    file: ./functions/services/config/prometheus.yml
  prometheus_rules:
    file: ./functions/services/config/alert.rules.yml
  alertmanager_config:
    file: ./functions/services/config/alertmanager.yml

networks:
  functions:
    driver: overlay
    attachable: true
    labels:
      - 'openfaas=true'
